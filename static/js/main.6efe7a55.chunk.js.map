{"version":3,"sources":["components/Title/Title.js","context/UsersContext.js","context/UserContext.js","components/Join/Join.js","components/Game/UserList/UserCard/UserCard.js","components/Game/UserList/UserList.js","context/GuessListContext.js","components/Game/GuessContainer/GuessContainer.js","components/Game/ScoreBoard/ScoreBoard.js","components/Game/Canvas/Canvas.js","components/Game/Colors.js","components/Game/Options/Options.js","components/Game/Canvas/Functions/Functions.js","components/Game/Game.js","components/Home.js","App.js","index.js"],"names":["Title","props","id","style","fontSize","size","textAlign","align","data-content","className","color","UsersContext","createContext","UsersProvider","useState","users","setUsers","Provider","value","children","UserContext","UserProvider","username","user","setUser","Join","setGame","socketRef","wait","setWait","useContext","error","setError","handleSubmit","e","current","emit","result","allUsers","Audio","process","play","stroke","autoComplete","type","placeholder","name","onChange","target","prev","onKeyPress","code","onClick","UserCard","details","drawerId","icon","faPencilAlt","score","UserList","map","u","index","GuessListContext","GuessListProvider","guessList","setGuessList","GuessContainer","guess","setGuess","guessListRef","useRef","useEffect","scrollTop","scrollHeight","renderSpan","msg","fontWeight","ref","g","key","back","backgroundColor","margin","padding","overflowWrap","transition","sender","message","toLowerCase","which","length","trim","ScoreBoard","scoredUsers","word","i","findIndex","renderScoreCard","Canvas","drawing","setDrawing","canvasParent","drawBackground","drawLine","clearCanvas","eraseCanvas","setCanvas","editOption","canvasRef","editOptionRef","colorRef","mousedown","undefined","canvas","ctx","getContext","parentWidth","clientWidth","parentHeight","clientHeight","smaller","width","height","on","mousemove","data","initial","x","x1","y","y1","final","x2","y2","setEventListeners","touchAction","drawImage","window","addEventListener","forEach","element","context","mouseDownHandler","mouseMoveHandler","mouseUpHandler","offsetX","offsetY","cursor","colors","Options","options","handleColorChange","Colors","classes","renderColorBox","handler","renderIcon","fillStyle","fillRect","beginPath","lineWidth","lineCap","lineJoin","strokeStyle","moveTo","lineTo","closePath","clearRect","sessionStorage","removeItem","setItem","toDataURL","Game","finalScores","setFinalScores","setScoredUsers","canvasStatus","setCanvasStatus","setDrawerId","words","setWords","setWord","time","setTime","rounds","setRounds","totalRounds","setTotalRounds","setEditOption","setColor","playAudio","val","el","counter","round","sort","a","b","newWord","filter","filename","faEraser","faTrash","renderWordOptions","w","handleWordSubmit","renderFinalScores","renderFinalScoreCard","faClock","unknown","getUnknownWord","renderCanvasStatus","Home","ENDPOINT","game","io","transports","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6efe7a55.chunk.js","sourcesContent":["function Title (props) {\n    return(\n        <div id='title' style={{\n            fontSize: `${props.size}`,\n            textAlign: `${props.align}`\n        }}>\n            <span data-content=\"r\" className=\"title-span\" style={{\n                color:'red',\n            }}>r</span>\n            <span data-content=\"o\" className=\"title-span\" style={{\n                color:'orangered',\n            }}>o</span>\n            <span data-content=\"b\" className=\"title-span\" style={{\n                color:'skyblue',\n            }}>b</span>\n            <span data-content=\"b\" className=\"title-span\" style={{\n                color:'blue',\n            }}>b</span>\n            <span data-content=\"l\" className=\"title-span\" style={{\n                color:'purple',\n            }}>l</span>\n        </div>\n    );\n}\n\nexport default Title","import React, { useState, createContext } from 'react'\n\nexport const UsersContext = createContext()\n\nexport const UsersProvider = (props) => {\n    const [users, setUsers] = useState([])\n\n    return (\n        <UsersContext.Provider value={[users, setUsers]}>\n            {props.children}\n        </UsersContext.Provider>\n    );\n}","import React, { useState, createContext } from 'react'\n\nexport const UserContext = createContext()\n\nexport const UserProvider = (props) => {\n    const [user, setUser] = useState({\n        id:'',\n        username:'',\n    })\n\n    return (\n        <UserContext.Provider value={[user, setUser]}>\n            {props.children}\n        </UserContext.Provider>\n    );\n}","import './Join.css'\nimport {useState, useContext} from 'react'\nimport Title from '../Title/Title'\nimport { UsersContext } from '../../context/UsersContext'\nimport { UserContext } from '../../context/UserContext'\n\nfunction Join (props) {\n    const {setGame, socketRef, wait, setWait} = props\n    const [user, setUser] = useContext(UserContext)\n    const [users, setUsers] = useContext(UsersContext)\n    const [error, setError] = useState('')\n\n    //  Audio\n    const playAudio = () => {\n        let audio = new Audio(process.env.PUBLIC_URL + '/sounds/join.ogg')\n        audio.play()\n    }\n\n    //  Handle input change\n    const handleChange = (e) => {\n        let {name, value} = e.target\n        setUser(prev => {\n            return {\n                ...prev,\n                [name]:value\n            }\n        })\n    }\n\n    const handleSubmit = (e) => {\n        if(user.username !== ''){\n            //  Everything is fine\n            socketRef.current.emit('join', user, (result)=>{\n                if(result.error){\n                    setError(result.error)\n                }\n                else{\n                    setError('')\n                    setGame(true)\n                    setUsers(result.allUsers)\n                    playAudio(true)\n                }\n            })\n        }\n        else{\n            setError('Fill up the details!')\n        }\n    }\n\n    //  Render functions\n    const renderError = () => {\n        return (\n            <p id=\"error\">\n                {error}\n            </p>\n        );\n    }\n\n    return (\n        <div className='outer-container'>\n            <Title size='15vw' stroke='0.4vw' align='center' />\n            <div className=\"form-container\">\n                <div id=\"login-form\">\n                    <input id=\"username\" autoComplete=\"off\" className=\"mt-10\" type=\"text\" placeholder=\"Username\" name=\"username\" onChange={handleChange} onKeyPress={(e) => e.code === 'Enter' ? handleSubmit(e) : null} value={user.username} />\n                    <button id=\"play\" className=\"mt-10\" onClick={handleSubmit}>COMINCIA!!!!!</button>\n                    {error ? renderError() : null}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Join","import './UserCard.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons'\n\nfunction UserCard(props){\n\n    const {user, details, drawerId} = props\n\n    const getName = () => {\n        return user.username + (details.username === user.username ? ' (You)' : '')\n    }\n\n    return(\n        <div className=\"card-container\">\n            <h3 id=\"user-name\">{getName()}</h3>\n            {user.id === drawerId ? <FontAwesomeIcon icon={faPencilAlt} /> : null}\n            <h3 id=\"user-score\">{user.score}</h3>\n        </div>\n    );\n}\n\nexport default UserCard\n\n// #A9FF83","import './UserList.css'\nimport UserCard from './UserCard/UserCard'\n\nfunction UserList({users, user, drawerId}){\n    return (\n        <div className='scores-container'>\n            {users.map((u, index) => <UserCard key={index} index={index} user={u} details={user} drawerId={drawerId}/> )}\n        </div>\n    );\n}\n\nexport default UserList","import React, { useState, createContext } from 'react'\n\nexport const GuessListContext = createContext()\n\nexport const GuessListProvider = (props) => {\n    const [guessList, setGuessList] = useState([])\n\n    return (\n        <GuessListContext.Provider value={[guessList, setGuessList]}>\n            {props.children}\n        </GuessListContext.Provider>\n    );\n}","import { useState, useRef, useEffect, useContext } from 'react'\nimport { GuessListContext } from '../../../context/GuessListContext'\nimport './GuessContainer.css'\n\nfunction GuessContainer({socketRef}){\n    const [guess, setGuess] = useState('')\n    const [guessList, setGuessList] = useContext(GuessListContext)\n    const guessListRef = useRef(null)\n\n    useEffect(() => {\n        if(guessListRef.current)\n            guessListRef.current.scrollTop = guessListRef.current.scrollHeight\n    }, [guessList])\n\n    const handleGuessChange = (e) => {\n        setGuess(e.target.value.toLowerCase())\n    }\n    const handleGuessSubmit = (e) => {\n        if(e.which === 13 && guess.length > 0 && guess.trim().length > 0) {\n            socketRef.current.emit('guess', guess.trim())\n            setGuess('')\n        }\n    }\n\n    const renderGuess = (g, key) => {\n        let back = key % 2===0 ? '#E8E8E8' : '#C8C8C8'\n        return (\n            <p key={key} style={{\n                color:`${g.color}`,\n                backgroundColor: back,\n                margin:'0',\n                padding: '10px',\n                overflowWrap: 'break-word',\n                transition: '0.5s ease'\n            }}> {g.sender ? renderSpan(g.sender) : null} <span>{g.message}</span> </p>\n        )\n    }\n    \n    const renderSpan = (msg) => {\n        return (\n            <span style={{\n                fontWeight:'800'\n            }}> {msg} : </span>\n        )\n    }\n\n    return (\n        <div className=\"guess-container\">\n            <div ref={guessListRef} className=\"guess-list\">\n                {guessList.map(renderGuess)}\n            </div>\n            <div className=\"input-container\">\n                <input className=\"guess-input\" type=\"text\" placeholder=\"Indovina ...\" onChange={handleGuessChange} onKeyPress={handleGuessSubmit} value={guess} />\n            </div>\n        </div>\n    );\n}\n\nexport default GuessContainer","import './ScoreBoard.css'\n\nfunction ScoreBoard({users, scoredUsers, word}){\n\n    const renderScoreCard = (user, i) => {\n        const index = scoredUsers.findIndex((u) => u === user.id)\n        return (\n            <div key={i} className=\"score-card\">\n                <h5> {user.username} </h5>\n                <h5 style={{ color:'green' }}> {index === -1 ? 0 : 100} </h5>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"score-board\">\n            <h3 className=\"scores\"> The word was : {word} </h3>\n            {users.map((u, index) => renderScoreCard(u, index))}\n        </div>\n    );\n}\n\nexport default ScoreBoard","import './Canvas.css'\nimport {useRef, useEffect} from 'react'\n\nfunction Canvas(props){\n\n    const {socketRef, drawerId, drawing, setDrawing, canvasParent, drawBackground, drawLine, clearCanvas, eraseCanvas, setCanvas, editOption, color} = props\n    const canvasRef = useRef(null)\n    const editOptionRef = useRef(editOption)\n    const colorRef = useRef(color)\n    let mousedown = undefined\n\n    //  Main useeffect\n    useEffect(() => {\n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n\n        setCanvas(canvas)\n\n        if(canvasParent.current){\n            let parentWidth = canvasParent.current.clientWidth\n            let parentHeight = canvasParent.current.clientHeight\n            let smaller = parentWidth < parentHeight ? parentWidth : parentHeight\n            canvas.width = smaller\n            canvas.height = smaller\n        }\n        drawBackground(ctx, canvas)\n\n\n        //  Sockets\n        socketRef.current.on('draw', ({color, mousedown, mousemove}) => {\n            drawLine(ctx, canvas, color, mousedown, mousemove)\n        })\n\n        socketRef.current.on('erase', ({mousedown, mousemove}) => {\n            eraseCanvas(ctx, canvas, 'white', mousedown, mousemove)\n        })\n\n        socketRef.current.on('clear', ()=>{\n            clearCanvas(ctx, canvas)\n            setDrawing([])\n        })\n\n        socketRef.current.on('drawData', ({x1, y1, x2, y2, color}) => {\n            const data = {\n                initial:{\n                    x: x1,\n                    y: y1\n                },\n                final:{\n                    x: x2,\n                    y: y2\n                },\n                color: color\n            }\n            setDrawing(prev => [...prev, data])\n        })\n\n    }, [socketRef])\n\n    //  Drawerid useeffect\n    useEffect(() => {\n        if(socketRef.current.id === drawerId){\n            setEventListeners(canvasRef.current, canvasRef.current.getContext('2d'))\n            canvasRef.current.style.touchAction = 'none'\n        }\n    }, [socketRef, drawerId])\n\n    //  Color / Edit Option change useEffect\n    useEffect(() => {\n        colorRef.current = color\n        editOptionRef.current = editOption\n    }, [color, editOption])\n\n    //  On drawing\n    useEffect(() => {\n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n        drawImage(ctx, canvas)\n\n        window.addEventListener('resize', (e)=>{\n            if(canvasParent.current){\n                let parentWidth = canvasParent.current.clientWidth\n                let parentHeight = canvasParent.current.clientHeight\n                let smaller = parentWidth < parentHeight ? parentWidth : parentHeight\n                canvas.width = smaller\n                canvas.height = smaller\n            }\n            drawBackground(canvas.getContext('2d'), canvas)\n            drawImage(canvas.getContext('2d'), canvas)\n        })\n    }, [drawing])\n\n    //  Draw complete\n    const drawImage = (ctx, canvas) => {\n        clearCanvas(ctx, canvas)\n        drawing.forEach(element => {\n            const initial = {\n                x: element.initial.x * canvas.width,\n                y: element.initial.y * canvas.height\n            }\n            const final = {\n                x: element.final.x * canvas.width,\n                y: element.final.y * canvas.height\n            }\n            if(final.x && final.y){\n                drawLine(ctx, canvas, element.color, initial, final)\n            }\n            else{\n                drawLine(ctx, canvas, element.color, initial)\n            }\n        });\n    }\n\n    //  Set and remove pointer event listeners\n    const setEventListeners = (canvas, context) => {\n        canvas.addEventListener('pointerdown', e => mouseDownHandler(e, context))\n        canvas.addEventListener('pointermove', e => mouseMoveHandler(e, context))\n        canvas.addEventListener('pointerup', e => mouseUpHandler(e, context))\n        canvas.addEventListener('pointerleave', e => mouseUpHandler(e, context))\n        canvas.addEventListener('pointercancel', e => mouseUpHandler(e, context))\n    }\n    // const removeListeners = (canvas, context) => {\n    //     canvas.removeEventListener('pointerdown', e => mouseDownHandler(e, context))\n    //     canvas.removeEventListener('pointermove', e => mouseMoveHandler(e, context))\n    //     canvas.removeEventListener('pointerup', e => mouseUpHandler(e, context))\n    //     canvas.removeEventListener('pointerleave', e => mouseUpHandler(e, context))\n    //     canvas.removeEventListener('pointercancel', e => mouseUpHandler(e, context))\n    // }\n\n    //  Event handlers\n    const mouseMoveHandler = (e, context) => {\n        if(mousedown){\n            let mousemove = {\n                x: e.offsetX,\n                y: e.offsetY\n            }\n            const canvas = canvasRef.current\n            // draw line\n            if(editOptionRef.current === 'edit'){\n                // drawLine(context, canvas, colorRef.current, mousedown, mousemove)\n                const data = {\n                    initial:{\n                        x: mousedown.x / canvas.width,\n                        y: mousedown.y / canvas.height\n                    },\n                    final:{\n                        x:mousemove.x / canvas.width,\n                        y:mousemove.y / canvas.height\n                    },\n                    color: colorRef.current\n                }\n                setDrawing(prev => [...prev, data])\n                socketRef.current.emit('drawData', {\n                    x1 : data.initial.x,\n                    y1 : data.initial.y,\n                    x2 : data.final.x,\n                    y2 : data.final.y,\n                    color: colorRef.current,\n                })\n            }\n            else{\n                // drawLine(context, canvasRef.current, 'white', mousedown, mousemove)\n                const data = {\n                    initial:{\n                        x: mousedown.x / canvas.width,\n                        y: mousedown.y / canvas.height\n                    },\n                    final:{\n                        x:mousemove.x / canvas.width,\n                        y:mousemove.y / canvas.height\n                    },\n                    color: 'white'\n                }\n                setDrawing(prev => [...prev, data])\n                socketRef.current.emit('drawData', {\n                    x1 : data.initial.x,\n                    y1 : data.initial.y,\n                    x2 : data.final.x,\n                    y2 : data.final.y,\n                    color: 'white',\n                })\n            }\n\n            mousedown = mousemove\n        }\n    }\n    const mouseDownHandler = (e, context) => {\n        mousedown = {\n            x: e.offsetX,\n            y: e.offsetY,\n        }\n        const canvas = canvasRef.current\n        if(editOptionRef.current === 'edit'){\n            // drawLine(context, canvas, colorRef.current, mousedown)\n            const data = {\n                initial:{\n                    x: mousedown.x / canvas.width,\n                    y: mousedown.y / canvas.height\n                },\n                final:{},\n                color: colorRef.current\n            }\n            setDrawing(prev => [...prev, data])\n            socketRef.current.emit('drawData', {\n                x1 : data.initial.x,\n                y1 : data.initial.y,\n                color: colorRef.current,\n            })\n        }\n        else{\n            // drawLine(context, canvasRef.current, 'white', mousedown)\n            const data = {\n                initial:{\n                    x: mousedown.x / canvas.width,\n                    y: mousedown.y / canvas.height\n                },\n                final:{},\n                color: 'white'\n            }\n            setDrawing(prev => [...prev, data])\n            socketRef.current.emit('drawData', {\n                x1 : data.initial.x,\n                y1 : data.initial.y,\n                color: 'white',\n            })\n        }\n    }\n    const mouseUpHandler = (e, context) => {\n        mousedown = undefined;\n    }\n\n    //  Render\n    return (\n        <canvas ref={canvasRef} id='canvas' style={{\n            cursor: 'url(./Cursor/edit5.svg) 5 5, crosshair'\n        }} />\n    );\n}\n\nexport default Canvas","const colors = [\n    '#000000',\n    '#FFFFFF',\n    '#C0C0C0',\n    '#808080',\n    '#FFA500',\n    '#A52A2A',\n    '#800000',\n    '#008000',\n    '#808000',\n    '#FF0000',\n    '#00FFFF',\n    '#0000FF',\n    '#0000A0',\n    '#ADD8E6',\n    '#800080',\n    '#FFFF00',\n    '#00FF00',\n    '#FF00FF'\n]\nexport default colors","import './Options.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport Colors from '../Colors'\n\nfunction Options({color, options, editOption, handleColorChange}){\n    const renderIcon = (e, index) => {\n        let classes = 'option-icon'\n        if(e.name === editOption){\n            classes += ' option-icon-active'\n        }\n        return(\n            <FontAwesomeIcon key={index} className={classes} icon={e.icon} onClick={e.handler} />\n        )\n    }\n\n    const renderColorBox = (e, index) => {\n        let classes = 'color-box'\n        if(e === color){\n            classes += ' color-box-active'\n        }\n        return (\n            <button key={index} onClick={()=>handleColorChange(e)} className={classes} style={{\n                backgroundColor: `${e}`,\n            }}>\n            </button>\n        );\n    }\n    return (\n        <div className=\"options-outer-container\">\n            <div className=\"options-container\">\n                {Colors.map((e, index) => renderColorBox(e, index))}\n            </div>\n            <div className=\"options-container\">\n                {options.map((e, index) => renderIcon(e, index))}\n            </div>\n        </div>\n    );\n}\n\nexport default Options","let strokeColor = 'black'\n\nexport const drawBackground = (context, canvas) => {\n    if(context){\n        context.fillStyle='white'\n        context.fillRect(0, 0, canvas.width, canvas.height)\n    }\n}\n\nexport const drawLine = (context, canvas, color, initial, final) => {\n    if(context){\n        if(final){\n            context.beginPath()\n            context.lineWidth = 6\n            context.lineCap = 'round'\n            context.lineJoin = 'round'\n            context.strokeStyle = color\n            context.moveTo(initial.x, initial.y)\n            context.lineTo(final.x, final.y)\n            context.stroke()\n            context.closePath()\n        }\n        else{\n            context.fillStyle = color\n            context.fillRect(initial.x - 4, initial.y - 4, 6, 6)\n        }\n    }\n}\n\nexport const clearCanvas = (context, canvas) => {\n    if(context){\n        context.clearRect(0, 0, canvas.width, canvas.height)\n        drawBackground(context, canvas)\n        window.sessionStorage.removeItem('drawing')\n    }\n}\n\nexport const eraseCanvas = (context, canvas, color, initial, final) => {\n    if(context){\n        if(final){\n            context.beginPath()\n            context.strokeStyle = 'white'\n            context.lineWidth = 10\n            context.lineCap = 'round'\n            context.lineJoin = 'round'\n            context.moveTo(initial.x, initial.y)\n            context.lineTo(final.x, final.y)\n            context.stroke()\n            context.closePath()\n        }\n        else{\n            context.fillStyle = 'white'\n            context.fillRect(initial.x - 5, initial.y - 5, 10, 10)\n        }\n        // socket.emit('draw', {initial, final})\n        window.sessionStorage.setItem('drawing', canvas.toDataURL('image/svg'))\n    }\n}\n\nexport default strokeColor","import './Game.css'\nimport {useState, useEffect, useRef, useContext} from 'react'\nimport Title from '../Title/Title'\nimport UserList from './UserList/UserList'\nimport GuessContainer from './GuessContainer/GuessContainer'\nimport ScoreBoard from './ScoreBoard/ScoreBoard'\nimport Canvas from './Canvas/Canvas'\nimport Options from './Options/Options'\nimport {drawBackground, drawLine, clearCanvas, eraseCanvas} from './Canvas/Functions/Functions'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEraser, faPencilAlt, faTrash, faClock } from '@fortawesome/free-solid-svg-icons'\nimport Colors from './Colors'\nimport { UsersContext } from '../../context/UsersContext'\nimport { UserContext } from '../../context/UserContext'\nimport { GuessListContext } from '../../context/GuessListContext'\n\nfunction Game (props) {\n\n    const {socketRef, wait, setWait} = props\n    const [users, setUsers] = useContext(UsersContext)\n    const [user, setUser] = useContext(UserContext)\n    const [finalScores, setFinalScores] = useState([])\n    const [scoredUsers, setScoredUsers] = useState([])\n    const [canvasStatus, setCanvasStatus] = useState('canvas')\n    const [drawerId, setDrawerId] = useState('')\n    const [drawing, setDrawing] = useState([])\n    const [words, setWords] = useState([])\n    const [word, setWord] = useState('_')\n    const [time, setTime] = useState('-')\n    const [rounds, setRounds] = useState(0)\n    const [totalRounds, setTotalRounds] = useState(0)\n    const [editOption, setEditOption] = useState('edit')\n    const [canvas, setCanvas] = useState(null)\n    const [color, setColor] = useState(Colors[0])\n    const canvasParent = useRef(null)\n    const [guessList, setGuessList] = useContext(GuessListContext)\n\n    useEffect(() => {\n        socketRef.current.emit('joined', user.username)\n\n        //  When a user joins\n        socketRef.current.on('addUser', (u) => {\n            playAudio('join')\n            setUsers(prev => {\n                return [...prev, u]\n            })\n        })\n\n        //  Wait\n        socketRef.current.on('wait', (val) => {\n            setWait(val)\n        })\n\n        //  Update the score\n        socketRef.current.on('updateScore', (u) => {\n            playAudio('playerGuessed')\n            setUsers(prev => {\n                return prev.map((el) => el.id === u.id ? u : el)\n            })\n        })\n\n        //  A guess is made\n        socketRef.current.on('guess', (g) => {\n            setGuessList(prev => [...prev, g])\n        })\n        \n        //  Choose a word\n        socketRef.current.on('chooseWord', (words)=>{\n            setWords(words)\n            setCanvasStatus('words')\n            setFinalScores([])\n        })\n\n        //  On drawing\n        socketRef.current.on('drawing', ({drawing}) => {\n            setDrawing(drawing)\n        })\n\n        //  Timer\n        socketRef.current.on('timer', (counter)=>{\n            playAudio('tick')\n            setTime(counter)\n        })\n        socketRef.current.on('end', (scoredUsers)=>{\n            setCanvasStatus('end')\n            // setTurnEnd(true)\n            setScoredUsers(scoredUsers)\n            setDrawing([])\n            setTime('-')\n        })\n\n        //  Rounds\n        socketRef.current.on('total-rounds', (totalRounds)=>{\n            setTotalRounds(totalRounds)\n        })\n        socketRef.current.on('rounds', (round) => {\n            setRounds(round)\n        })\n        socketRef.current.on('endgame', (allUsers) => {\n            playAudio('roundEndSuccess')\n            setFinalScores(allUsers.sort((a, b)=>{\n                return a.score >= b.score ? -1 : 1\n            }))\n            setCanvasStatus('endgame')\n        })\n\n        //  Reset scores\n        socketRef.current.on('reset', ()=>{\n            //  Set scores to zero\n            setUsers(prev => {\n                return prev.map(el => {\n                    return {\n                        ...el,\n                        score:0\n                    }\n                })\n            })\n\n            setTime('-')\n       \n            //  Set the guess list empty\n            setGuessList([])\n        })\n        \n        //  Drawer index\n        socketRef.current.on('drawer', ({id, newWord})=>{\n            setDrawerId(id)\n            setWord(newWord)\n            setScoredUsers([])\n            setCanvasStatus('canvas')\n            // setTurnEnd(false)\n        })\n\n        //  When a user leaves\n        socketRef.current.on('removeUser', (u) => {\n            playAudio('leave')\n            setUsers(prev => {\n                return prev.filter((el) => el.id !== u.id)\n            })\n        })\n    }, [])\n\n    //  Change handlers\n    const getUnknownWord = () => {\n        let size = word.length\n        let unknown = ''\n        for(let i = 0; i < size; i++){\n            if(word[i] === '-' || word[i] === ' ')\n                unknown += word[i]\n            else\n                unknown += '_'\n        }\n        if(unknown === '_' || unknown === ''){\n            return '_'\n        }\n        return unknown\n    }\n\n    //  Play sounds\n    const playAudio = (filename) => {\n        let audio = new Audio(process.env.PUBLIC_URL + '/sounds/' + filename + '.ogg')\n        audio.play()\n    }\n\n    //  Options handler\n    const handleClear = (e) => {\n        if(socketRef.current.id === drawerId){\n            clearCanvas(canvas.getContext('2d'), canvas)\n            setDrawing([])\n            socketRef.current.emit('clear')\n        }\n    }\n\n    const handleWordSubmit = (w) => {\n        socketRef.current.emit('chooseWord', w)\n        playAudio('roundStart')\n        setWords([])\n    }\n\n    const handleEditOption = () => {\n        setEditOption('edit')\n    }\n\n    const handleEraseOption = () => {\n        setEditOption('erase')\n    }\n\n    const handleColorChange = (e) => {\n        setColor(e)\n    }\n\n    const options = [\n        {\n            name:'edit',\n            icon:faPencilAlt,\n            handler:handleEditOption\n        },\n        {\n            name:'erase',\n            icon:faEraser,\n            handler:handleEraseOption\n        },\n        {\n            name:'clear',\n            icon:faTrash,\n            handler:handleClear\n        }\n    ]\n\n    //  Render functions\n    const renderOptions = () => {\n        return(\n            <Options options={options} color={color} editOption={editOption} handleColorChange={handleColorChange} />\n        );\n    }\n\n    const renderScoreBoard = () => {\n        return (\n            <ScoreBoard users={users} scoredUsers={scoredUsers} word={word} />\n        );\n    }\n\n    const renderCanvas = () => {\n        return (\n            <Canvas canvasParent={canvasParent} socketRef={socketRef} drawing={drawing} setDrawing={setDrawing} drawerId={drawerId} drawBackground={drawBackground} drawLine={drawLine} clearCanvas={clearCanvas} eraseCanvas={eraseCanvas} setCanvas={setCanvas} editOption={editOption} color={color} time={time} />\n        );\n    }\n\n    const renderWordOptions = () => {\n        return (\n            <div className=\"canvas-options-outer-container\">\n                <h3>Scegli una parola!</h3>\n                <div className=\"word-options-container\">\n                    {words.map((w, index) => <button key={index} className=\"word-option\" onClick={()=>handleWordSubmit(w)} > {w} </button>)}\n                </div>\n            </div>\n        );\n    }\n\n    const renderFinalScoreCard = (u, index) => {\n        return (\n            <div key={index} className=\"card-flexed\">\n                <h3> # {index + 1} </h3>\n                <h3> {u.username} </h3>\n                <h3> {u.score} </h3>\n            </div>\n        );\n    }\n\n    const renderFinalScores = () => {\n        return (\n            <div className=\"canvas-options-outer-container\">\n                {finalScores.map((u, index) => renderFinalScoreCard(u, index))}\n            </div>\n        );\n    }\n\n    const renderCanvasStatus = () => {\n        switch (canvasStatus) {\n            case 'words':\n                return renderWordOptions()\n            case 'canvas':\n                return renderCanvas()\n            case 'end':\n                return renderScoreBoard()\n            case 'endgame':\n                return renderFinalScores()\n            default:\n                break;\n        }\n    }\n\n    if(wait){\n        return (\n            <div className=\"outer-container center-wait\">\n                <h1 className=\"wait\">In attesa degli altri giocatori!</h1>\n            </div>\n        );\n    }\n    else\n    return (\n        <div className=\"outer-container\">\n            <nav>\n                <Title size='3rem' stroke='2px' align='left' />\n            </nav>\n            <div className=\"word-bar\">\n                <div className=\"rounds-info-container\">\n                    <h1 className=\"timer\"> <FontAwesomeIcon icon={faClock} /> {time} s </h1>\n                    <h1 className=\"rounds\"> {rounds} / {totalRounds} </h1>\n                </div>\n                <h1 className=\"word\"> {socketRef.current.id === drawerId ? word : getUnknownWord()} </h1>\n            </div>\n            <div className=\"canvas-outer-container\">\n\n                <UserList users={users} user={user} drawerId={drawerId} />\n                \n                <div ref={canvasParent} className=\"canvas-container\">\n                    { renderCanvasStatus() }\n                </div>\n\n                <GuessContainer socketRef={socketRef} />\n\n            </div>\n            {renderOptions()}\n        </div>\n    );\n\n}\n\nexport default Game","import {useState, useEffect, useRef} from 'react'\nimport io from 'socket.io-client'\nimport Join from './Join/Join'\nimport Game from './Game/Game'\nimport { GuessListProvider } from '../context/GuessListContext'\n\nlet socket;\n\nfunction Home () {\n    // const ENDPOINT = '127.0.0.1:5000'\n    const ENDPOINT = 'https://skribbl-cloned.herokuapp.com/'\n    const [game, setGame] = useState(false)\n    const [wait, setWait] = useState(true)\n    const socketRef = useRef(null)\n\n    useEffect(() => {\n        socketRef.current = io(ENDPOINT, {transports:['websocket']})\n    }, [ENDPOINT])\n\n    return (\n        <GuessListProvider>\n            <div>\n                {\n                game ? \n                    <Game\n                        socketRef={socketRef}\n                        setWait={setWait}\n                        wait={wait}\n                    /> \n                    :\n                    <Join\n                        socketRef={socketRef}\n                        wait={wait}\n                        setGame={setGame}\n                        setWait={setWait}\n                    />\n                }\n            </div>\n        </GuessListProvider>\n    );\n}\n\nexport default Home","import Home from './components/Home'\nimport { UserProvider } from './context/UserContext';\nimport { UsersProvider } from './context/UsersContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UsersProvider>\n        <UserProvider>\n          <Home />\n        </UserProvider>\n      </UsersProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}